syntax = "proto3";
package racing;

option go_package = "/racing";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

service Racing {
  // ListRaces returns a list of all races.
  rpc ListRaces(ListRacesRequest) returns (ListRacesResponse) {
    option (google.api.http) = { post: "/v1/list-races", body: "*" };
  }

   // GetRace will attempt to retrieve a race by Id
   rpc GetRace(GetRaceRequest) returns (Race) {
    option (google.api.http) = { get: "/v1/races/{id}"};
   }
}

/* Requests/Responses */

// Request for ListRaces call.
message ListRacesRequest {
  ListRacesRequestFilter filter = 1;
}

message GetRaceRequest {
  int64 id = 1;
}

// Response to ListRaces call.
message ListRacesResponse {
  repeated Race races = 1;
}

// Filter for listing races.
message ListRacesRequestFilter {
  repeated int64 meeting_ids = 1;

 // Filter to return visible only (Note: task only specified being able to retrieve visible = true or getting all
  // regardless of filter)
  bool retrieve_visible_only = 2;
}

/* Resources */

// A race resource.
message Race {
  // ID represents a unique identifier for the race.
  int64 id = 1;
  // MeetingID represents a unique identifier for the races meeting.
  int64 meeting_id = 2;
  // Name is the official name given to the race.
  string name = 3;
  // Number represents the number of the race.
  int64 number = 4;
  // Visible represents whether or not the race is visible.
  bool visible = 5;
  // AdvertisedStartTime is the time the race is advertised to run.
  google.protobuf.Timestamp advertised_start_time = 6;
  // Status = CLOSED indicates if advertised_start_time is in the past. Status = OPEN if advertised_start_time in future
  string status = 7;
}
