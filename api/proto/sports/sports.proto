syntax = "proto3";
package sports;

option go_package = "/sports";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

service Sports {
  // ListEvents will return a collection of all events.
  rpc ListEvents(ListEventRequest) returns (ListEventResponse) {
    option (google.api.http) = { post: "/v1/list-events", body: "*" };
  }
}

/* Requests/Responses */

message ListEventRequest {
    ListEventRequestFilter filter = 1;
}

// Response to ListEvent call.
message ListEventResponse {
  repeated Event events = 1;
}

// Filter for listing events.
message ListEventRequestFilter {

    //filter by sport types
  repeated string sport = 1;

  // Filter to return visible only (Note: task only specified being able to retrieve visible = true or getting all
  // regardless of filter)
  bool retrieve_visible_only = 2;
}

/* Resources */

// A event resource.
message Event {
  // ID represents a unique identifier for the event.
  int64 id = 1;
  // Name is the name of the event
  string name = 2;
  // Sport represents the sport type of the event (ie cricket, football)
  string sport = 3;
  // Visible represents whether or not the event is visible.
  bool visible = 4;
  // AdvertisedStartTime is the time the event is advertised to start.
  google.protobuf.Timestamp advertised_start_time = 5;
  // Status = CLOSED indicates if advertised_start_time is in the past. Status = OPEN if advertised_start_time in future
  string status = 6;
}

